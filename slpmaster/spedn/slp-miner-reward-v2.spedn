// SLP Mint Miner Contract

contract SlpCoinBlockReward(
    [byte] state_t0,
    [byte] tokenId,
    Sha256 rawscrBaseSha256
    ) {
        challenge generate(
            Sig s,
            PubKey minerPK,
            [byte] rawscrBase,
            [byte; 8] newTokenSatoshis,
            [byte; 8] newBatonSatoshis,
            [byte; 4] minerSolution,
            [byte; 8] mintAmount,
            [byte; 5] state_t1,
            [byte] preimage
    ) {
        // preimage deserializaion
        int preimageSize = size(preimage);
        [byte] tail = snd(preimage @ (preimageSize - 40)); // hashOutput + nLocktime + sighash
        //[byte] hashOutput = fst(tail @ 32);
        //[byte] torso = fst(preimage @ (preimageSize - 44));
        //[byte] belly = snd(torso @ 104);
        [byte] belly = snd(fst(preimage @ (preimageSize - 44)) @ 104);
        [byte] value = snd(belly @ (size(belly) - 8));

        // verify script sig is updating state with the proper block height
        ([byte; 4] prevBlockHeight, [byte] difficulty) = state_t0 @ 4;
        ([byte; 4] blockHeight, [byte] nextDifficulty) = state_t1 @ 4;
        int blockHeightInt = bin2num(blockHeight);
        verify bin2num(prevBlockHeight) == blockHeightInt - 1;
        verify blockHeightInt < 229095;

        // calculate proper mintAmount based on current block height
        //int baseMint = 400000000;     // 400 with a precision of 6 decimal places
        //int divisor = (blockHeightInt / 26280) + 1;
        verify mintAmount == num2bin(400000000 / ((blockHeightInt / 26280) + 1), 4);

        // flip the byte order for SLP output amount
        ([byte] left, [byte] first) = mintAmount @ 3;
        ([byte] last, [byte] middle) = left @ 1;
        ([byte] mr, [byte] ml) = middle @ 1;
        [byte] mintAmountBE = 0x00000000 . first . ml . mr . last;

        // verify the miner's solution is acceptable using the prev difficulty
        verify bin2num(fst(hash256(preimage . minerSolution) @ bin2num(difficulty))) == 0;

        // restrict new baton value to 21 BCH or less
        ([byte] batonValueBin, [byte] zeros) = newBatonSatoshis @ 4;
        verify bin2num(zeros) == 0;
        int batonValue = bin2num(batonValueBin);
        verify batonValue <= 2100000000;

        // verify script sig is updating state with new difficulty
        int factor = batonValue / 100;
        if (factor < 32) {
            verify nextDifficulty == 0x02;
        } else { if (factor < 1024) {
            verify nextDifficulty == 0x03;
        } else { if (factor < 32768) {
            verify nextDifficulty == 0x04;
        } else {
            verify nextDifficulty == 0x05;
        }}}

        // check proper token output satoshis
        // NOTE: the reduction in baton value will be deposited in token reward satoshi amount
        ([byte] tokenValueBin, [byte] zeros2) = newTokenSatoshis @ 4;
        int tokenValue = bin2num(tokenValueBin);
        verify bin2num(zeros2) == 0;
        int prevBatonValue = bin2num(fst(value @ 4));
        if (batonValue < prevBatonValue) {
            verify tokenValue == 546 + (prevBatonValue - batonValue);
        } else {
            verify tokenValue == 546;
        }

        // verify rawScrBase 
        verify sha256(rawscrBase) == rawscrBaseSha256;

        //[byte] out1_slp_msg = 0x0000000000000000396a04534c50000101044d494e5420 . tokenId . 0x010208 . mintAmountBE;
        //[byte] out2_token_p2pkh = newTokenSatoshis . 0x1976a914 . hash160(minerPK) . 0x88ac;
        //[byte] out3_baton_p2sh = newBatonSatoshis . 0x17a914 . hash160(0x05 . state_t1 . 0x20 . tokenId . 0x20 . rawscrBaseSha256 . rawscrBase) . 0x87;

        verify hash256(0x0000000000000000396a04534c50000101044d494e5420 . tokenId . 0x010208 . mintAmountBE . newTokenSatoshis . 0x1976a914 . hash160(minerPK) . 0x88ac . newBatonSatoshis . 0x17a914 . hash160(0x05 . state_t1 . 0x20 . tokenId . 0x20 . rawscrBaseSha256 . rawscrBase) . 0x87) == Sha256(fst(tail @ 32));
        verify checkLockTime(TimeStamp(blockHeightInt));

        separator;
        // check sig to enforce valid preimage and scriptCode
        verify checkSig(s, minerPK);
        verify checkDataSig(toDataSig(s), sha256(preimage), minerPK);
    }
}
